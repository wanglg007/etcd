(1)消息
(1.1)MsgHup消息
    Follower节点在选举计时器超时的行为：首先它会通过tickElection()创建MsgHUP消息并将其交给raft.Step方法进行处理；raft.Step方法会将当前Follower节点
切换成PreCandidate状态，然后创建MsgPreVote类型的消息，最后将该消息追加到raft.msgs字段中，等待上层模块将其发送出去。
(1.2)MsgPriVote消息
    当集群中其他节点收到上节所述节点发送来的MsgPreVote消息之后，经过网络层及相关验证之后，最终也会调用raft.Step()方法进行处理。消息处理过程为：
raft.Setp()方法首先检测该MsgPreVote消息是否为Leader节点迁移时发出的消息及其他合法性检测，决定当前节点是否参与此次选举；之后当前节点会根据自身的决定
决定是否将投票给MsgPreVote消息的发送节点。
(1.3)MsgPreVoteResp消息
    PreCandidate节点会收到集群中其他节点返回的MsgPreVoteResponse消息，其他的Term字段与PreCandidate节点的Term值相同。在raft.Step()方法中没有对Term值
相等的MsgPreVoteResp消息做特殊的处理，而是直接交给了raft.step字段指向的函数进行处理。
    当PreCandidate状态节点收到半数以上的投票时，会通过r.campaign()方法发起正式选举，其中会通过raft.becomeCandidate()方法将当前节点切换成Candidate状态，
并向剩余其他节点发送MsgVote消息。
(1.4)MsgVote消息
    PreCandidate状态节点收到半数以上的投票之后，会发起新一轮的选举，即向集群中的其他节点发送MsgVote消息。当集群中的其他节点收到MsgVote消息之后，也是
交由raft.Setp()方法进行处理。
    raft.Step()方法中根据消息类型进行分类处理的代码片段中，除了检测当前节点是否投票及发送MsgVoteResponse消息，还会重置当前节点的选举超时计时器并更新
raft.Vote字段。
(1.5)MsgVoteResp消息
    该消息由raft.setpCandidate()方法进行处理。该消息的处理过程：raft.Setp()方法首先检测当前节点是否收到半数以上的选票。如果是，则将当前节点切换成Leader
状态，之后向集群中其他节点发送消息。
(1.6)MspApp消息
    在MsgAPP消息的处理过程中，集群中其他节点已经切换成了Follower状态，并且它们自身记录的Term值与该任期中Leader节点维护的Term值相同。当它们收到当前
Leader节点发来的MsgAPP消息时，也是交由raft.Step()方法处理。
(1.7)MspAppResp消息
    当Leader节点收到集群中其他Follower节点发送的MsgAppResp相应消息之后，也是交由raft.Step()方法进行处理的，其中会调用raft.step字段指向的StepLeader()
函数进行处理。


















